@using FacebookLike.Models
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@inject IPostService PostService
@inject ICommentService CommentService

<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex align-items-center mb-3">
            <ProfileImage User="Author" clazz="me-2" />
            <div>
                <h6 class="mb-0">@AuthorName</h6>
                <small class="text-muted">@FormatTime(Post.CreatedAt)</small>
            </div>
        </div>
        <p class="card-text">@Post.Content</p>
        @if (!string.IsNullOrEmpty(Post.ImageUrl))
        {
            <ImagePreview Url="@Post.ImageUrl" Class="mb-3" />
        }
        <div class="d-flex justify-content-between text-muted mb-2">
            <span>@LikesCount Likes</span>
            <span>@CommentsCount Comments</span>
        </div>
        <hr />
        <div class="d-flex justify-content-between">
            <button class="btn btn-light w-100 me-2 like-btn" @onclick="HandleLike">
                <i class="bi @(IsLikedByUser ? "bi-heart-fill text-danger" : "bi-heart text-secondary")"></i>
                @(IsLikedByUser ? "Unlike" : "Like")
            </button>
            <button class="btn btn-light w-100" @onclick="HandleToggleComments">
                <i class="bi bi-chat"></i>
                Comment
            </button>
        </div>
        @if (ShowComments)
        {
            <div class="mt-3 border-top pt-2">
                @if (LoadingComments)
                {
                    <div class="text-center text-muted">Loading comments...</div>
                }
                else
                {
                    <CommentList Comments="Comments" CurrentUser="CurrentUser" />
                    <CommentInput Value="@NewComment" OnSend="HandleAddComment" />
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Post Post { get; set; }
    [Parameter] public User Author { get; set; }
    [Parameter] public string AuthorName { get; set; }
    [Parameter] public long LikesCount { get; set; }
    [Parameter] public long CommentsCount { get; set; }
    [Parameter] public bool IsLikedByUser { get; set; }
    [Parameter] public bool ShowComments { get; set; }
    [Parameter] public bool LoadingComments { get; set; }
    [Parameter] public List<CommentDetails> Comments { get; set; }
    [Parameter] public User CurrentUser { get; set; }
    [Parameter] public string NewComment { get; set; }

    private async Task HandleLike()
    {
        if (CurrentUser == null) return;
        await PostService.ToggleLikeAsync(Post.Id, CurrentUser.Id);
        var updatedPost = await PostService.GetPostByIdAsync(Post.Id, CurrentUser.Id);
        if (updatedPost != null)
        {
            IsLikedByUser = updatedPost.IsLikedByUser;
            LikesCount = updatedPost.LikesCount;
            StateHasChanged();
        }
    }

    private async Task HandleToggleComments()
    {
        if (!ShowComments)
        {
            LoadingComments = true;
            StateHasChanged();
            Comments = await CommentService.GetCommentsByPostAsync(Post.Id);
            LoadingComments = false;
            ShowComments = true;
        }
        else
        {
            ShowComments = false;
        }
        StateHasChanged();
    }

    private async Task HandleAddComment(string content)
    {
        if (string.IsNullOrWhiteSpace(content) || CurrentUser == null) return;
        await CommentService.AddCommentAsync(Post.Id, CurrentUser.Id, content);
        Comments = await CommentService.GetCommentsByPostAsync(Post.Id);
        CommentsCount = Comments.Count;
        NewComment = string.Empty;
        StateHasChanged();
    }

    private string FormatTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1)
            return "Now";
        if (timeSpan.TotalMinutes < 60)
            return (int)timeSpan.TotalMinutes + " minute(s) ago";
        if (timeSpan.TotalHours < 24)
            return (int)timeSpan.TotalHours + " hour(s) ago";
        if (timeSpan.TotalDays < 3)
            return (int)timeSpan.TotalDays + " day(s)";
        return dateTime.ToString("dd/MM/yyyy");
    }
} 