@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject NavigationManager navigationManager
@inject IFriendService FriendService
@inject IMessageService MessageService
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FacebookLike</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column d-flex flex-column h-100">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (currentUser != null)
        {
            <div class="nav-item px-3 flex-grow-1">
                <NavLink class="nav-link" href="my-profile">
                    <span class="bi bi-person-circle-nav-menu" aria-hidden="true"></span> My profile
                </NavLink>
            </div>
            @if (Friends.Count > 0)
            {
                <div class="nav-item px-3 mt-2">
                    <div class="list-group">
                        @foreach (var friend in Friends)
                        {
                            <a class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" @onclick="async () => await GoToConversation(friend.Id)" tabindex="0">
                                @friend.FirstName @friend.LastName
                                @if (UnreadCounts.TryGetValue(friend.Id, out var count) && count > 0) { <span class="badge bg-danger ms-2">@count</span> }
                            </a>
                        }
                    </div>
                </div>
            }
            <div class="nav-item px-3 mt-auto">
                <div class="nav-link" @onclick="Logout">
                    <span class="bi bi-logout-nav-menu" aria-hidden="true"></span> Logout
                </div>
            </div>
        }
        else
        {
            <div class="nav-item px-3 mt-3">
                <NavLink class="nav-link" href="/login">Login</NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private List<User> Friends = new();
    private Dictionary<string, long> UnreadCounts = new();
    private HubConnection? hubConnection;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            Friends = await FriendService.GetFriendsAsync(currentUser.Id);
            await LoadUnreadCounts();
            await SetupSignalR();
        }
    }

    private async Task LoadUnreadCounts()
    {
        UnreadCounts.Clear();
        foreach (var friend in Friends)
        {
            var conversation = await MessageService.GetOrCreateConversationAsync(currentUser.Id, friend.Id);
            var count = await MessageService.GetUnreadCountForConversationAsync(conversation.Id, currentUser.Id);
            UnreadCounts[friend.Id] = count;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetupSignalR()
    {
        if (currentUser == null) return;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri($"/messagehub?userId={currentUser.Id}"))
            .Build();
        await hubConnection.StartAsync();

        hubConnection.On<string, long, string>("UpdateUnreadCountForConversation",
            async (conversationId,
                count,
                recipientId) =>
            {
                foreach (var friend in Friends)
                {
                    var conv = await MessageService.GetOrCreateConversationAsync(currentUser.Id,
                        friend.Id);
                    if (conv.Id == conversationId && currentUser.Id == recipientId)
                    {
                        UnreadCounts[friend.Id] = count;
                        await InvokeAsync(StateHasChanged);
                        break;
                    }
                }
            });
    }

    private async Task GoToConversation(string friendId)
    {
        if (currentUser == null) return;
        var conversation = await MessageService.GetOrCreateConversationAsync(currentUser.Id, friendId);
        navigationManager.NavigateTo($"/conversation/{conversation.Id}");
    }

    private async void Logout()
    {
        try
        {
            await JS.InvokeVoidAsync("logoutUser");
            navigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception e)
        {
            JS.InvokeVoidAsync("blazoredToast.show", "Logout failed. Please try again.");
        }
    }
}