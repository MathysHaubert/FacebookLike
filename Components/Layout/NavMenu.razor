@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using Microsoft.AspNetCore.SignalR.Client
@using FacebookLike.Components.Composant
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject NavigationManager navigationManager
@inject IFriendService FriendService
@inject IMessageService MessageService
@inject INotificationService NotificationService
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FacebookLike</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column d-flex flex-column h-100">
        <div class="nav-item px-3">
            <NavLink class="nav-link d-flex align-items-center gap-2" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu nav-icon" aria-hidden="true"></span>
                <span>Home</span>
            </NavLink>
        </div>

        @if (currentUser != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2 position-relative" href="/notifications">
                    <span class="bi bi-bell-fill nav-icon" aria-hidden="true" style="top: -5px;"></span>
                    <span>Notifications</span>
                    @if (_unreadNotificationCount > 0)
                    {
                        <NotificationBadge Count="@_unreadNotificationCount"  Clazz="notification-badge" />
                    }
                </NavLink>
            </div>
            <div class="nav-item px-3 flex-grow-1">
                <NavLink class="nav-link d-flex align-items-center gap-2" href="my-profile">
                    <span class="bi bi-person-circle-nav-menu nav-icon" aria-hidden="true"></span>
                    <span>My profile</span>
                </NavLink>
            </div>
            @if (Friends.Count > 0)
            {
                <div class="nav-item px-3 mt-2">
                    <div class="bg-dark bg-opacity-25 rounded-3 p-2">
                        <div class="d-flex align-items-center mb-2 px-2">
                            <h6 class="text-muted mb-0">Friends</h6>
                            <NotificationBadge Count="@TotalUnreadCount" Clazz="ms-2" />
                        </div>
                        <div class="friends-scroll overflow-auto" style="max-height: 300px;">
                            @foreach (var friend in SortedFriends)
                            {
                                <a class="d-flex align-items-center px-2 py-2 text-decoration-none text-white rounded-2 hover-bg-light" 
                                   @onclick="async () => await GoToConversation(friend.Id)" 
                                   tabindex="0">
                                    <div class="me-2">
                                        <ProfileImage User="friend" Size="32" clazz="border border-secondary" />
                                    </div>
                                    <div class="flex-grow-1 text-truncate">
                                        <div class="small">@friend.FirstName @friend.LastName</div>
                                    </div>
                                    @if (UnreadCounts.TryGetValue(friend.Id, out var count) && count > 0)
                                    {
                                        <div class="ms-2 d-flex align-items-center">
                                            <NotificationBadge Count="@count" Clazz="align-self-center" />
                                        </div>
                                    }
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="nav-item px-3 mt-auto">
                <div class="nav-link" @onclick="Logout">
                    <span class="bi bi-logout-nav-menu" aria-hidden="true"></span> Logout
                </div>
            </div>
        }
        else
        {
            <div class="nav-item px-3 mt-3">
                <NavLink class="nav-link" href="/login">Login</NavLink>
            </div>
        }
    </nav>
</div>

<style>
    .hover-bg-light:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    /* Scrollbar personnalisée */
    .friends-scroll {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
    }

    .friends-scroll::-webkit-scrollbar {
        width: 6px;
    }

    .friends-scroll::-webkit-scrollbar-track {
        background: transparent;
    }

    .friends-scroll::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
    }

    .friends-scroll::-webkit-scrollbar-thumb:hover {
        background-color: rgba(255, 255, 255, 0.3);
    }

    .nav-icon {
        color: #fff;
    }
    .notification-badge {
        position: absolute;
        top: 4px;
        left: 20px;
        background: #dc3545;
        color: #fff;
        border-radius: 50%;
        padding: 2px 7px;
        font-size: 0.75rem;
        font-weight: bold;
        box-shadow: 0 0 0 2px #1a237e;
        z-index: 2;
        transition: transform 0.2s;
    }
    .nav-link:hover .nav-icon {
        color: #ffc107;
        transform: scale(1.1);
    }
    .nav-link {
        color: #fff;
        font-weight: 500;
    }
    .nav-link.active, .nav-link:active {
        color: #ffc107;
    }
</style>

@code {
    private List<User> Friends = new();
    private Dictionary<string, long> UnreadCounts = new();
    private HubConnection? hubConnection;
    private HubConnection? notificationHubConnection;
    private User? currentUser;
    private long TotalUnreadCount => UnreadCounts.Values.Sum();
    private long _unreadNotificationCount;

    private List<User> SortedFriends => Friends
        .OrderByDescending(f => UnreadCounts.GetValueOrDefault(f.Id, 0))
        .ThenBy(f => f.FirstName)
        .ThenBy(f => f.LastName)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            Friends = await FriendService.GetFriendsAsync(currentUser.Id);
            await LoadUnreadCounts();
            await SetupSignalR();
            await SetupNotificationHub();
            _unreadNotificationCount = await NotificationService.GetUnreadCountAsync(currentUser.Id);
        }
    }

    private async Task LoadUnreadCounts()
    {
        UnreadCounts.Clear();
        foreach (var friend in Friends)
        {
            var conversation = await MessageService.GetOrCreateConversationAsync(currentUser.Id, friend.Id);
            var count = await MessageService.GetUnreadCountForConversationAsync(conversation.Id, currentUser.Id);
            UnreadCounts[friend.Id] = count;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetupSignalR()
    {
        if (currentUser == null) return;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri($"/messagehub?userId={currentUser.Id}"))
            .Build();
        await hubConnection.StartAsync();

        hubConnection.On<string, long, string>("UpdateUnreadCountForConversation",
            async (conversationId,
                count,
                recipientId) =>
            {
                foreach (var friend in Friends)
                {
                    var conv = await MessageService.GetOrCreateConversationAsync(currentUser.Id,
                        friend.Id);
                    if (conv.Id == conversationId && currentUser.Id == recipientId)
                    {
                        UnreadCounts[friend.Id] = count;
                        await InvokeAsync(StateHasChanged);
                        break;
                    }
                }
            });
    }

    private async Task SetupNotificationHub()
    {
        if (currentUser == null) return;
        
        try
        {
            notificationHubConnection = new HubConnectionBuilder()
                .WithUrl(navigationManager.ToAbsoluteUri($"/notificationhub?userId={currentUser.Id}"))
                .WithAutomaticReconnect()
                .Build();

            notificationHubConnection.On<string, int>("UpdateNotificationCount", (userId ,count) =>
            {
                if (userId != currentUser.Id) return;
                
                _unreadNotificationCount = count;
                InvokeAsync(StateHasChanged);   
            });

            await notificationHubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up notification hub: {ex.Message}");
            await JS.InvokeVoidAsync("blazoredToast.show", "Unable to connect to notifications service");
        }
    }

    private async Task GoToConversation(string friendId)
    {
        if (currentUser == null) return;
        var conversation = await MessageService.GetOrCreateConversationAsync(currentUser.Id, friendId);
        navigationManager.NavigateTo($"/conversation/{conversation.Id}");
    }

    private async void Logout()
    {
        try
        {
            await JS.InvokeVoidAsync("logoutUser");
            navigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception e)
        {
            JS.InvokeVoidAsync("blazoredToast.show", "Logout failed. Please try again.");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        if (notificationHubConnection is not null)
        {
            await notificationHubConnection.DisposeAsync();
        }
    }
}