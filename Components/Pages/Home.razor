@page "/"
@rendermode InteractiveServer
@using FacebookLike.Models
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using PostCreate = FacebookLike.Models.PostCreate
@inject IPostService PostService
@inject IAuthService AuthService
@inject IJSRuntime JS
@inject IFriendService FriendService

<script src="/js/infiniteScroll.js"></script>
<RequireAuth>
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (_isLoading && _posts.Count == 0)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <PostCreate CurrentUser="currentUser" OnCreatePost="CreatePost" />
                
                @if (_posts.Count == 0)
                {
                    <div class="card shadow-sm mt-4">
                        <div class="card-body text-center py-5">
                            <i class="bi bi-newspaper fs-1 text-muted mb-3"></i>
                            <h4 class="mb-3">No Posts to Show</h4>
                            <p class="text-muted mb-4">Be the first to share something with your friends!</p>
                            <a href="/search" class="btn btn-primary">
                                <i class="bi bi-search me-2"></i>Find Friends
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <PostList 
                        Posts="_posts"
                        CurrentUser="currentUser"
                    />
                    @if (_isLoading && _posts.Count > 0)
                    {
                        <div class="d-flex justify-content-center my-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    @if (!_hasMore)
                    {
                        <div class="text-center">
                            <p class="text-muted mb-0">You have reached the end of the feed.</p>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>
</RequireAuth>

@code {
    private List<PostDetails> _posts = new();
    private int _page = 1;
    private const int PageSize = 20;
    private bool _isLoading = false;
    private bool _hasMore = true;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await LoadMorePosts();
    }

    private async Task LoadMorePosts()
    {
        if (_isLoading || !_hasMore) return;
        _isLoading = true;
        StateHasChanged();
        var user = currentUser;
        if (user == null)
        {
            _isLoading = false;
            return;
        }
        var newPosts = await PostService.GetFriendsPostsAsync(user.Id, _page, PageSize);
        if (newPosts.Count == 0) _hasMore = false;
        _posts.AddRange(newPosts);
        _page++;
        _isLoading = false;
        StateHasChanged();
    }

    // Infinite scroll
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            JS.InvokeVoidAsync("initInfiniteScroll", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollToBottom()
    {
        await LoadMorePosts();
    }

    private async Task CreatePost(PostCreate postForm)
    {
        var user = currentUser;
        if (user == null) return;
        await PostService.CreatePostAsync(user.Id, postForm.Content, postForm.ImageStream, postForm.ImageName);
        _posts.Clear();
        _page = 1;
        _hasMore = true;
        await LoadMorePosts();
    }
}
