@page "/"
@rendermode InteractiveServer
@using FacebookLike.Models
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@inject IPostService PostService
@inject IAuthService AuthService
@inject ICommentService CommentService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<script src="/js/infiniteScroll.js"></script>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (_isLoading && _posts.Count == 0)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <!-- Zone de création de post -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <img src="https://picsum.photos/seed/profile1/40/40" class="rounded-circle me-2" width="40" height="40" alt="Profile" />
                            <input type="text" class="form-control" placeholder="Quoi de neuf ?" />
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-light">
                                <i class="bi bi-camera-video"></i> Vidéo en direct
                            </button>
                            <button class="btn btn-light">
                                <i class="bi bi-images"></i> Photo
                            </button>
                            <button class="btn btn-light">
                                <i class="bi bi-emoji-smile"></i> Humeur
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Liste des posts -->
                @foreach (var postWithAuthor in _posts)
                {
                    var post = postWithAuthor.Post;
                    var author = postWithAuthor.Author;
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <img src=@($"https://api.dicebear.com/9.x/adventurer/svg?seed={author.FirstName}{author.LastName}") class="rounded-circle me-2" width="40" height="40" alt="@author.Username" />
                                <div>
                                    <h6 class="mb-0">@author.FirstName @author.LastName</h6>
                                    <small class="text-muted">@FormatTime(post.CreatedAt)</small>
                                </div>
                            </div>
                            <p class="card-text">@post.Content</p>
                            @if (!string.IsNullOrEmpty(post.ImageUrl))
                            {
                                <img src="https://www.mmv.fr/images/cms/paysage-montagne-ete/paysage-montagne-mont-blanc.jpg?frz-v=536" class="img-fluid rounded mb-3" alt="Post image" />
                            }
                            else
                            {
                                <img src="https://picsum.photos/seed/@post.Id/800/400" class="img-fluid rounded mb-3" alt="Post image" />
                            }
                            <div class="d-flex justify-content-between text-muted mb-2">
                                <span>@postWithAuthor.LikesCount Likes</span>
                                <span>@postWithAuthor.CommentsCount Comments</span>
                            </div>
                            <hr />
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-light w-100 me-2" @onclick="() => AddOrRemoveLike(post)">
                                    <i class="bi @(postWithAuthor.IsLikedByUser ? "bi-heart-fill text-danger" : "bi-heart")"></i>
                                    @(postWithAuthor.IsLikedByUser ? "Unlike" : "Like")
                                </button>
                                <button class="btn btn-light w-100" @onclick="() => ToggleComments(postWithAuthor)">
                                    <i class="bi bi-chat"></i>
                                    Comment
                                </button>
                            </div>
                            @if (_commentsOpen.ContainsKey(post.Id) && _commentsOpen[post.Id])
                            {
                                <div class="mt-3 border-top pt-2">
                                    @if (_loadingComments.ContainsKey(post.Id) && _loadingComments[post.Id])
                                    {
                                        <div class="text-center text-muted">Loading comments...</div>
                                    }
                                    else
                                    {
                                        @if (postWithAuthor.Comments.Count == 0)
                                        {
                                            <div class="text-muted">No comments yet.</div>
                                        }
                                        else
                                        {
                                            @foreach (var comment in postWithAuthor.Comments)
                                            {
                                                <div class="mb-2">
                                                    <b>@comment.AuthorId</b> <span class="text-muted small">@comment.CreatedAt.ToString("g")</span><br />
                                                    @comment.Content
                                                </div>
                                            }
                                        }
                                        <div class="input-group mt-2">
                                            <input class="form-control" placeholder="Add a comment..." @bind="_newComment[post.Id]" />
                                            <button class="btn btn-primary" @onclick="() => AddComment(postWithAuthor)">Send</button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                @if (_isLoading && _posts.Count > 0)
                {
                    <div class="d-flex justify-content-center my-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                @if (!_hasMore)
                {
                    <div class="text-center">
                        <p class="text-muted mb-0">You have reached the end of the feed.</p>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<PostWithAuthor> _posts = new();
    private int _page = 1;
    private const int PageSize = 20;
    private bool _isLoading = false;
    private bool _hasMore = true;
    private Dictionary<string, bool> _commentsOpen = new();
    private Dictionary<string, string> _newComment = new();
    private Dictionary<string, bool> _loadingComments = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        await LoadMorePosts();
    }

    private async Task LoadMorePosts()
    {
        if (_isLoading || !_hasMore) return;
        _isLoading = true;
        var user = AuthService.CurrentUser;
        if (user == null)
        {
            _isLoading = false;
            return;
        }
        var newPosts = await PostService.GetFriendsPostsAsync(user.Id, _page, PageSize);
        if (newPosts.Count == 0) _hasMore = false;
        _posts.AddRange(newPosts);
        _page++;
        _isLoading = false;
        StateHasChanged();
    }

    private void AddOrRemoveLike(Post post)
    {
        // PostService.AddOrRemoveLike(post);
    }

    private string FormatTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1)
            return "Now";
        if (timeSpan.TotalMinutes < 60)
            return (int)timeSpan.TotalMinutes + " minute(s) ago";
        if (timeSpan.TotalHours < 24)
            return (int)timeSpan.TotalHours + "hour(s) ago";
        if (timeSpan.TotalDays < 3)
            return (int)timeSpan.TotalDays + " day(s)";
        return dateTime.ToString("dd/MM/yyyy");
    }

    // Infinite scroll
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            JS.InvokeVoidAsync("initInfiniteScroll", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollToBottom()
    {
        await LoadMorePosts();
    }

    private async Task ToggleComments(PostWithAuthor postWithAuthor)
    {
        var postId = postWithAuthor.Post.Id;
        if (!_commentsOpen.ContainsKey(postId) || !_commentsOpen[postId])
        {
            _commentsOpen[postId] = true;
            if (postWithAuthor.Comments.Count == 0 && !_loadingComments.ContainsKey(postId))
            {
                _loadingComments[postId] = true;
                StateHasChanged();

                postWithAuthor.Comments = await CommentService.GetCommentsByPostAsync(postId);
                _loadingComments[postId] = false;
                StateHasChanged();
            }
        }
        else
        {
            _commentsOpen[postId] = false;
        }
    }

    private async Task AddComment(PostWithAuthor postWithAuthor)
    {
        var postId = postWithAuthor.Post.Id;
        var content = _newComment.ContainsKey(postId) ? _newComment[postId] : string.Empty;
        if (string.IsNullOrWhiteSpace(content)) return;
        var user = AuthService.CurrentUser;
        if (user == null) return;
        await CommentService.AddCommentAsync(postId, user.Id, content);
        postWithAuthor.Comments = await CommentService.GetCommentsByPostAsync(postId);
        postWithAuthor.CommentsCount = postWithAuthor.Comments.Count;
        _newComment[postId] = string.Empty;
        StateHasChanged();
    }
}
