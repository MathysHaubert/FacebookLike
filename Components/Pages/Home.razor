@page "/"
@rendermode InteractiveServer
@using FacebookLike.Models
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using PostCreate = FacebookLike.Models.PostCreate
@inject IPostService PostService
@inject IAuthService AuthService
@inject ICommentService CommentService
@inject IJSRuntime JS

<script src="/js/infiniteScroll.js"></script>
<RequireAuth>
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (_isLoading && _posts.Count == 0)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <PostCreate CurrentUser="currentUser" OnCreatePost="CreatePost" />
                <PostList 
                    Posts="_posts"
                    CurrentUser="currentUser"
                    CommentsOpen="_commentsOpen"
                    LoadingComments="_loadingComments"
                    NewComment="_newComment"
                    OnLikeClicked="AddOrRemoveLike"
                    OnToggleCommentsClicked="ToggleComments"
                    OnAddComment="AddCommentFromList"
                />
                @if (_isLoading && _posts.Count > 0)
                {
                    <div class="d-flex justify-content-center my-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                @if (!_hasMore)
                {
                    <div class="text-center">
                        <p class="text-muted mb-0">You have reached the end of the feed.</p>
                    </div>
                }
            }
        </div>
    </div>
</div>
</RequireAuth>

@code {
    private List<PostDetails> _posts = new();
    private int _page = 1;
    private const int PageSize = 20;
    private bool _isLoading = false;
    private bool _hasMore = true;
    private Dictionary<string, bool> _commentsOpen = new();
    private Dictionary<string, string> _newComment = new();
    private Dictionary<string, bool> _loadingComments = new();
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await LoadMorePosts();
    }

    private async Task LoadMorePosts()
    {
        if (_isLoading || !_hasMore) return;
        _isLoading = true;
        StateHasChanged();
        var user = currentUser;
        if (user == null)
        {
            _isLoading = false;
            return;
        }
        var newPosts = await PostService.GetFriendsPostsAsync(user.Id, _page, PageSize);
        if (newPosts.Count == 0) _hasMore = false;
        _posts.AddRange(newPosts);
        _page++;
        _isLoading = false;
        StateHasChanged();
    }

    private void AddOrRemoveLike(Post post)
    {
        // PostService.AddOrRemoveLike(post);
    }

    // Infinite scroll
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            JS.InvokeVoidAsync("initInfiniteScroll", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollToBottom()
    {
        await LoadMorePosts();
    }

    private async Task ToggleComments(PostDetails postDetails)
    {
        var postId = postDetails.Post.Id;
        if (!_commentsOpen.ContainsKey(postId) || !_commentsOpen[postId])
        {
            _commentsOpen[postId] = true;
            if (postDetails.Comments.Count == 0 && !_loadingComments.ContainsKey(postId))
            {
                _loadingComments[postId] = true;
                StateHasChanged();

                postDetails.Comments = await CommentService.GetCommentsByPostAsync(postId);
                _loadingComments[postId] = false;
            }

            if (!_newComment.ContainsKey(postId))
            {
                _newComment[postId] = string.Empty;
            }

            StateHasChanged();
        }
        else
        {
            _commentsOpen[postId] = false;
        }
    }

    private async Task AddCommentFromList((PostDetails postDetails, string content) tuple)
    {
        var postDetails = tuple.postDetails;
        var content = tuple.content;
        var postId = postDetails.Post.Id;
        if (string.IsNullOrWhiteSpace(content)) return;
        var user = currentUser;
        if (user == null) return;
        await CommentService.AddCommentAsync(postId, user.Id, content);
        postDetails.Comments = await CommentService.GetCommentsByPostAsync(postId);
        postDetails.CommentsCount = postDetails.Comments.Count;
        _newComment[postId] = string.Empty;
        StateHasChanged();
    }

    private async Task CreatePost(PostCreate postForm)
    {
        var user = currentUser;
        if (user == null) return;
        await PostService.CreatePostAsync(user.Id, postForm.Content, postForm.ImageStream, postForm.ImageName);
        _posts.Clear();
        _page = 1;
        _hasMore = true;
        await LoadMorePosts();
    }
}
