@page "/register"
@using System.ComponentModel.DataAnnotations
@using FacebookLike.Models
@using FacebookLike.Service
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container-fluid min-vh-80 d-flex align-items-center justify-content-center">
    <div class="card shadow-sm" style="max-width: 500px; width: 100%;">
        <div class="card-body p-4">
            <div class="text-center mb-4">
                <h1 class="text-primary fw-bold" style="font-size: 3rem;">FacebookLike</h1>
                <h2 class="h4 text-dark">Create an account</h2>
                <p class="text-muted">It's free (and always will be)</p>
            </div>

            <div class="register-form">
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator/>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <InputText @bind-Value="registerModel.FirstName" class="form-control form-control-lg"
                                       placeholder="First name"/>
                            <ValidationMessage For="@(() => registerModel.FirstName)" class="text-danger small"/>
                        </div>
                        <div class="col">
                            <InputText @bind-Value="registerModel.LastName" class="form-control form-control-lg"
                                       placeholder="Last name"/>
                            <ValidationMessage For="@(() => registerModel.LastName)" class="text-danger small"/>
                        </div>
                    </div>
                    <div class="mb-3">
                        <InputText @bind-Value="registerModel.Email" class="form-control form-control-lg"
                                   placeholder="Email address"/>
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-danger small"/>
                    </div>
                    <div class="mb-3">
                        <InputText @bind-Value="registerModel.Username" class="form-control form-control-lg"
                                   placeholder="Username"/>
                        <ValidationMessage For="@(() => registerModel.Username)" class="text-danger small"/>
                    </div>
                    <div class="mb-3">
                        <InputText type="password" @bind-Value="registerModel.Password"
                                   class="form-control form-control-lg" placeholder="New password"/>
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger small"/>
                    </div>
                    <div class="mb-3">
                        <InputDate @bind-Value="registerModel.BirthDate" class="form-control form-control-lg"/>
                        <ValidationMessage For="@(() => registerModel.BirthDate)" class="text-danger small"/>
                    </div>
                    <div class="mb-3">
                        <InputSelect @bind-Value="registerModel.Gender" class="form-select form-select-lg">
                            <option value="">Select your gender</option>
                            <option value="F">Female</option>
                            <option value="M">Male</option>
                            <option value="O">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => registerModel.Gender)" class="text-danger small"/>
                    </div>
                    <button type="submit" class="btn btn-primary btn-lg w-100 mb-3">Register</button>
                </EditForm>
                <div class="text-center">
                    <a href="/login" class="text-decoration-none">Already have an account? Sign in</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        if (AuthService.CurrentUser != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            var user = await AuthService.Register(
                registerModel.Username,
                registerModel.Password,
                registerModel.Email,
                registerModel.FirstName,
                registerModel.LastName,
                registerModel.Gender,
                registerModel.BirthDate
            );
            if (user == null)
            {
                errorMessage = "Registration failed. Please try again.";
                return;
            }
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Registration error: " + ex.Message;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Birth date is required")]
        public DateOnly BirthDate { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = string.Empty;
    }

} 