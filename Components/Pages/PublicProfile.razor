@page "/profile/{Username}"
@using System.Globalization
@using FacebookLike.Models
@using FacebookLike.Service.Neo4jService
@using FacebookLike.Service.Security
@inject UserProfileService ProfileService
@inject IAuthService AuthService

@code {
    [Parameter]
    public string? Username { get; set; }

    private UserProfile? Profile;
    private bool _isLoading = true;
    private bool _isFollowing = false;
    private string? _currentUserId;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        Profile = null;
        _isFollowing = false;
        _currentUserId = null;

        if (!string.IsNullOrEmpty(Username))
        {
            // 1) Charger le profil public du Username
            Profile = await ProfileService.GetProfileAsync(Username);

            // 2) Récupérer l'utilisateur connecté (peut être null si personne n'est loggé)
            try
            {
                var currentUser = AuthService.CurrentUser;
                if (currentUser is not null)
                {
                    _currentUserId = currentUser.Id;
                }
            }
            catch
            {
                // S'il y a un accès inattendu à AuthService.CurrentUser, on ignore
                _currentUserId = null;
            }

            // 3) Si on a un utilisateur connecté ET qu'il ne consulte pas son propre profil,
            //    vérifier s'il suit déjà ce profil (pour ajuster le texte du bouton)
            if (!string.IsNullOrEmpty(_currentUserId)
                && Profile is not null
                && _currentUserId != Profile.UserName)
            {
                _isFollowing = await ProfileService.IsFollowingAsync(_currentUserId, Username);
            }
        }

        _isLoading = false;
    }

    private async Task OnFollowButtonClicked()
    {
        if (Profile is null 
            || string.IsNullOrEmpty(_currentUserId) 
            || string.IsNullOrEmpty(Profile.UserName))
        {
            return;
        }

        if (_isFollowing)
        {
            // Se désabonner
            await ProfileService.UnfollowAsync(_currentUserId, Profile.UserName);
            _isFollowing = false;
        }
        else
        {
            // S'abonner
            await ProfileService.FollowAsync(_currentUserId, Profile.UserName);
            _isFollowing = true;
        }

        // 4) Rafraîchir le compteur de followers
        Profile = await ProfileService.GetProfileAsync(Username);
    }
}

@if (_isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else if (Profile is null)
{
    <div class="text-center mt-5">
        <h4>Profil introuvable</h4>
        <p>L'utilisateur <strong>@Username</strong> n'existe pas ou a été supprimé.</p>
    </div>
}
else
{
    <div class="profile-page">
        <!-- Cover & Avatar -->
        <div class="position-relative">
            <img src="@Profile.CoverUrl" class="w-100" style="height: 300px; object-fit: cover;" />
            <img src="@Profile.AvatarUrl"
                 class="rounded-circle position-absolute"
                 style="width: 120px; height: 120px; bottom: -60px; left: 20px; object-fit: cover; border: 4px solid white;" />
        </div>

        <!-- Nom, followers et bouton Suivre/Abonné -->
        <div class="container mt-5">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-end">
                <div>
                    <h2 class="mb-1 fw-bold">@Profile.UserName</h2>
                    <small class="text-muted">
                        @Profile.Followers.ToString("N0", CultureInfo.InvariantCulture) followers
                    </small>
                </div>

                <div class="mt-3 mt-md-0 d-flex gap-2">
                    @* N’afficher le bouton Que si on est connecté 
                       et qu’on ne consulte pas son propre profil *@
                    @if (!string.IsNullOrEmpty(_currentUserId) 
                         && _currentUserId != Profile.UserName)
                    {
                        <button class="btn btn-primary d-flex align-items-center gap-1"
                                @onclick="OnFollowButtonClicked">
                            @if (_isFollowing)
                            {
                                <i class="bi bi-person-check-fill"></i>
                                <text>Abonné</text>
                            }
                            else
                            {
                                <i class="bi bi-person-plus-fill"></i>
                                <text>Suivre</text>
                            }
                        </button>
                    }

                    <button class="btn btn-outline-secondary d-flex align-items-center gap-1">
                        <i class="bi bi-search"></i> Rechercher
                    </button>
                    <button class="btn btn-light border d-flex align-items-center gap-1">
                        <i class="bi bi-three-dots"></i>
                    </button>
                </div>
            </div>

            <ul class="nav nav-tabs mt-4 overflow-auto" style="scrollbar-width: none;">
                <li class="nav-item"><a class="nav-link active" href="#">Publications</a></li>
            </ul>

            <div class="card shadow-sm mb-4 mt-4">
                <div class="card-body">
                    <textarea class="form-control mb-3" rows="3" placeholder="Que voulez-vous dire ?"></textarea>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-primary">Publier</button>
                    </div>
                </div>
            </div>

            <article class="card shadow-sm mb-4">
                <div class="card-footer bg-white">
                    <div class="d-flex justify-content-around">
                        <button class="btn btn-light flex-grow-1">
                            <i class="bi bi-hand-thumbs-up"></i> J’aime
                        </button>
                        <button class="btn btn-light flex-grow-1">
                            <i class="bi bi-chat"></i> Commenter
                        </button>
                        <button class="btn btn-light flex-grow-1">
                            <i class="bi bi-send"></i> Envoyer
                        </button>
                    </div>
                </div>
            </article>
        </div>
    </div>
}

<style>
    /* Cacher la scrollbar pour Firefox */
    .nav-tabs {
        scrollbar-width: none;
    }
    /* Pour WebKit */
    .nav-tabs::-webkit-scrollbar {
        display: none;
    }
</style>
