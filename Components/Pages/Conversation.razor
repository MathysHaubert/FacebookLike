@page "/conversation/{ConversationId}"
@rendermode InteractiveServer
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IAuthService AuthService
@inject IMessageService MessageService

@implements IAsyncDisposable

<h3>Conversation</h3>

<style>
    body, .conversation-container {
        background: #fff !important;
    }

    .conversation-container {
        max-width: 700px;
        margin: 40px auto;
        border-radius: 12px;
        box-shadow: 0 2px 16px rgba(0, 0, 0, 0.08);
        background: #fff;
        display: flex;
        flex-direction: column;
        height: 80vh;
        overflow: hidden;
    }

    .messages-list {
        flex: 1;
        overflow-y: auto;
        padding: 32px 24px 16px 24px;
        background: #fff;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .message-item {
        display: flex;
        flex-direction: column;
        max-width: 60%;
        padding: 12px 18px;
        border-radius: 16px;
        font-size: 1rem;
        position: relative;
        word-break: break-word;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);
    }

    .message-item.sent {
        align-self: flex-end;
        background: #d1f7c4;
        color: #222;
        border-bottom-right-radius: 4px;
    }

    .message-item.received {
        align-self: flex-start;
        background: #f0f0f0;
        color: #222;
        border-bottom-left-radius: 4px;
    }

    .message-image {
        max-width: 220px;
        max-height: 180px;
        border-radius: 8px;
        margin-bottom: 6px;
    }

    .timestamp {
        font-size: 0.75rem;
        color: #888;
        margin-top: 4px;
        align-self: flex-end;
    }

    .message-input-area {
        display: flex;
        align-items: center;
        padding: 16px 24px;
        background: #fff;
        border-top: 1px solid #eee;
        gap: 8px;
    }

    .message-input {
        flex: 1;
        border: 1px solid #ddd;
        border-radius: 20px;
        padding: 10px 16px;
        font-size: 1rem;
        resize: none;
        min-height: 40px;
        max-height: 120px;
        background: #fafafa;
        outline: none;
    }

    .icon-btn {
        background: none;
        border: none;
        color: #555;
        font-size: 1.4rem;
        cursor: pointer;
        padding: 6px 10px;
        border-radius: 50%;
        transition: background 0.2s;
    }

    .icon-btn:hover {
        background: #f0f0f0;
    }
</style>

<div class="conversation-container">
    <div class="messages-list" @ref="messagesListDiv">
        @foreach (var message in Messages)
        {
            <div class="message-item @(message.SenderId == CurrentUserId ? "sent" : "received")">
                @if (!string.IsNullOrEmpty(message.ImageUrl))
                {
                    <img src="@message.ImageUrl" class="message-image"/>
                }
                @if (!string.IsNullOrEmpty(message.TextContent))
                {
                    <span>@message.TextContent</span>
                }
                <span class="timestamp">@message.SentAt.ToLocalTime().ToString("g")</span>
            </div>
        }
    </div>
    <div class="message-input-area">
        <textarea
            @bind="NewMessage"
            @onkeydown="HandleKeyDown"
            placeholder="Type a message..." 
            class="message-input"></textarea>
        <label for="file-upload" title="Envoyer une image" class="icon-btn" style="margin-bottom:0;">
            <i class="bi bi-image"></i>
        </label>
        <InputFile id="file-upload" type="file" accept="image/*" OnChange="OnImageSelected" style="display:none"
                   @ref="fileInput"/>
        <button onclick="@SendMessage" title="Send message" class="icon-btn"><i class="bi bi-send"></i></button>
    </div>
</div>

@code {
    [Parameter] public string ConversationId { get; set; }
    private List<Message> Messages = new();
    private string NewMessage = string.Empty;
    private string? ImageUrl;
    private string? CurrentUserId;
    private User? CurrentUser;
    private InputFile fileInput;
    private ElementReference messagesListDiv;
    private HubConnection? hubConnection;
    private bool hasScrolledOnFirstMultiMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        CurrentUserId = user?.Id;
        CurrentUser = user;
        Messages = await MessageService.GetMessagesAsync(ConversationId);
        await MarkAllAsReadOnFocus();
        await SetupSignalR();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerConversationFocus", DotNetObjectReference.Create(this));
        }
        
        if (!hasScrolledOnFirstMultiMessage && Messages.Count > 1)
        {
            hasScrolledOnFirstMultiMessage = true;
            await ScrollToBottom();
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/messagehub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessageFull", async (message) =>
        {
            if (message.ConversationId == ConversationId)
            {
                Messages.Add(message);
                await JS.InvokeVoidAsync("blazoredToast.show", "New message received!");
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", ConversationId);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage) && string.IsNullOrEmpty(ImageUrl)) return;
        if (string.IsNullOrEmpty(CurrentUserId)) return;
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("SendMessage", ConversationId, CurrentUserId, NewMessage, ImageUrl);
        }

        NewMessage = string.Empty;
        ImageUrl = null;
        await ScrollToBottom();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = ((InputFileChangeEventArgs)e).File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            ImageUrl = await MessageService.UploadImageAsync(stream, file.Name);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
        else if (e.CtrlKey && e.Key == "v")
        {
            // Handle paste image from clipboard (requires JS interop)
            await JS.InvokeVoidAsync("handlePasteImage", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnImagePasted(string imageUrl)
    {
        ImageUrl = imageUrl;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesListDiv);
    }

    private async Task MarkAllAsReadOnFocus()
    {
        if (!string.IsNullOrEmpty(ConversationId) && !string.IsNullOrEmpty(CurrentUserId))
        {
            // Appel SignalR pour notifier tous les clients (menu, etc.)
            if (hubConnection != null)
            {
                await hubConnection.InvokeAsync("MarkConversationAsRead", ConversationId, CurrentUserId);
            }
            // Appel local pour s'assurer que les messages sont marqués comme lus côté serveur
            await MessageService.MarkMessagesAsReadAsync(ConversationId, CurrentUserId);
        }
    }

    [JSInvokable]
    public async Task OnPageFocus()
    {
        await MarkAllAsReadOnFocus();
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("LeaveConversation", ConversationId);
            await hubConnection.DisposeAsync();
        }
    }

}