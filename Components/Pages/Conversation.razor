@page "/conversation/{ConversationId}"
@rendermode InteractiveServer
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IAuthService AuthService
@inject IMessageService MessageService

@implements IAsyncDisposable

<div class="d-flex flex-column align-items-center">
    <div class="conversation-header d-flex align-items-center w-100 justify-content-start" style="max-width:700px;background:#f5f5f5;color:#222;padding:18px 28px;border-bottom:1px solid #e0e0e0;position:sticky;top:0;z-index:10;">
        @if (PartnerUser != null)
        {
            <ProfileImage User="PartnerUser" Size="48" clazz="me-3 border border-2 border-secondary" />
            <div>
                <div class="fw-semibold fs-5">@PartnerUser.FirstName @PartnerUser.LastName</div>
            </div>
        } else
        {
            <div class="placeholder-glow d-flex align-items-center">
                <span class="placeholder rounded-circle me-3" style="width:48px;height:48px;"></span>
                <div>
                    <div class="placeholder col-6" style="height:1.5rem;"></div>
                </div>
            </div>
        }
    </div>
    <div class="container conversation-container bg-white shadow rounded-3 mb-4 p-0 d-flex flex-column" style="max-width:700px;height:80vh;">
        <div class="messages-list flex-grow-1 overflow-auto p-4 d-flex flex-column gap-3" @ref="messagesListDiv">
        @foreach (var message in Messages)
        {
                var author = message.SenderId == CurrentUserId ? CurrentUser : PartnerUser;
                var isSent = message.SenderId == CurrentUserId;
                <div class="d-flex @(isSent ? "flex-row-reverse" : "") align-items-start mb-3">
                    <ProfileImage User="author" Size="36" clazz="border border-2 border-secondary mx-2" />
                    <div class="rounded-3 p-3 position-relative"
                         style="max-width:420px;background:@(isSent ? "#d1f7c4" : "#f0f0f0");color:#222;">
                        <div class="d-flex align-items-center mb-1 gap-2">
                            <span class="fw-medium">@author?.FirstName @author?.LastName</span>
                            <span class="text-secondary small">@message.SentAt.ToLocalTime().ToString("g")</span>
                        </div>
                @if (!string.IsNullOrEmpty(message.ImageUrl))
                {
                            <ImagePreview Url="@message.ImageUrl" Class="mb-2" Style="max-width:220px;max-height:180px;object-fit:cover;" />
                }
                @if (!string.IsNullOrEmpty(message.TextContent))
                {
                            <div class="mt-1">@message.TextContent</div>
                }
                    </div>
            </div>
        }
    </div>
           @if (!string.IsNullOrEmpty(ImagePreviewUrl))
            {
                <div class="w-100 d-flex justify-content-center mb-2">
                    <ImagePreview Url="@ImagePreviewUrl" Style="max-width:440px;max-height:360px;object-fit:cover;" />
                </div>
            }
        <div class="message-input-area d-flex align-items-center p-3 border-top gap-2 bg-white">
        <textarea
            @bind="NewMessage"
            @onkeydown="HandleKeyDown"
            placeholder="Type a message..." 
                class="form-control flex-grow-1 rounded-pill px-3 py-2"
                style="min-height:40px;max-height:120px;resize:none;font-size:0.95rem;"></textarea>
            <label for="file-upload" title="Envoyer une image" class="btn btn-outline-secondary rounded-circle mb-0">
            <i class="bi bi-image"></i>
        </label>
            <InputFile id="file-upload" type="file" accept="image/*" OnChange="OnImageSelected" style="display:none" @ref="fileInput"/>
            <button onclick="@SendMessage" title="Send message" class="btn btn-primary rounded-circle"><i class="bi bi-send"></i></button>
        </div>
     
    </div>
</div>

@code {
    [Parameter] public string ConversationId { get; set; }
    private List<Message> Messages = new();
    private string NewMessage = string.Empty;
    private IBrowserFile? SelectedImageFile;
    private string? ImagePreviewUrl;
    private MemoryStream ImageStream;
    private string? CurrentUserId;
    private User? CurrentUser;
    private User? PartnerUser;
    private InputFile fileInput;
    private ElementReference messagesListDiv;
    private HubConnection? hubConnection;
    private bool hasScrolledOnFirstMultiMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        CurrentUserId = user?.Id;
        CurrentUser = user;
        Messages = await MessageService.GetMessagesAsync(ConversationId);
        LoadPartnerUser();
        await SetupSignalR();
        await MarkAllAsRead();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerConversationFocus", DotNetObjectReference.Create(this));
        }
        
        if (!hasScrolledOnFirstMultiMessage && Messages.Count > 1)
        {
            hasScrolledOnFirstMultiMessage = true;
            await ScrollToBottom();
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/messagehub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessageFull", async (message) =>
        {
            if (message.ConversationId == ConversationId)
            {
                Messages.Add(message);
                await JS.InvokeVoidAsync("blazoredToast.show", "New message received!");
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinConversation", ConversationId);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage) && SelectedImageFile == null) return;
        if (string.IsNullOrEmpty(CurrentUserId)) return;
        string? imageUrl = null;
        if (SelectedImageFile != null && ImageStream is { Length: > 0 })
        {
            imageUrl = await MessageService.UploadImageAsync(ImageStream, SelectedImageFile.Name);
        }
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("SendMessage", ConversationId, CurrentUserId, NewMessage, imageUrl);
        }
        NewMessage = string.Empty;
        SelectedImageFile = null;
        ImagePreviewUrl = null;
        await ScrollToBottom();
        StateHasChanged();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        SelectedImageFile = e.File;
        if (SelectedImageFile != null)
        {
            await using var inputStream = SelectedImageFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await inputStream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            ImagePreviewUrl = $"data:{SelectedImageFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
            ImageStream = new MemoryStream(bytes);
        }
        StateHasChanged();
        await ScrollToBottom();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
        else if (e.CtrlKey && e.Key == "v")
        {
            // Handle paste image from clipboard (requires JS interop)
            await JS.InvokeVoidAsync("handlePasteImage", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnImagePasted(string imageUrl)
    {
        ImagePreviewUrl = imageUrl;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesListDiv);
    }

    private async Task MarkAllAsRead()
    {
        if (!string.IsNullOrEmpty(ConversationId) && !string.IsNullOrEmpty(CurrentUserId))
        {
            if (hubConnection != null)
            {
                await hubConnection.InvokeAsync("MarkConversationAsRead", ConversationId, CurrentUserId);
            }
        }
    }

    [JSInvokable]
    public async Task OnPageFocus()
    {
        await MarkAllAsRead();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPartnerUser()
    {
        var conv = await MessageService.GetConversationById(ConversationId);
        string partnerId = conv.User1Id == CurrentUserId ? conv.User2Id : conv.User1Id;
        PartnerUser = await AuthService.GetUserById(partnerId);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("LeaveConversation", ConversationId);
            await hubConnection.DisposeAsync();
        }
    }

}