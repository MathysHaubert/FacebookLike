@page "/notifications"
@rendermode InteractiveServer
@using FacebookLike.Neo4j.Node
@using FacebookLike.Service
@using Microsoft.AspNetCore.SignalR
@inject INotificationService NotificationService
@inject IAuthService AuthService
@inject IHubContext<NotificationHub> _notificationHubContext
@inject IJSRuntime JS

@implements IAsyncDisposable

@code {
    private List<Notification> _notifications = new();
    private User? _currentUser;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await AuthService.GetCurrentUserAsync();
        if (_currentUser != null)
        {
            _notifications = await NotificationService.GetNotificationsAsync(_currentUser.Id);
            await NotificationService.MarkAllAsReadAsync(_currentUser.Id);
            
            var unreadCount = await NotificationService.GetUnreadCountAsync(_currentUser.Id);
            await _notificationHubContext.Clients.All
                .SendAsync("UpdateNotificationCount", _currentUser.Id, unreadCount);
        }
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerConversationFocus", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnPageFocus()
    {
        if (_currentUser != null)
        {
            await NotificationService.MarkAllAsReadAsync(_currentUser.Id);
            var unreadCount = await NotificationService.GetUnreadCountAsync(_currentUser.Id);
            await _notificationHubContext.Clients.All
                .SendAsync("UpdateNotificationCount", _currentUser.Id, unreadCount);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task MarkAsRead(string notificationId)
    {
        if (_currentUser != null)
        {
            await NotificationService.MarkAsReadAsync(notificationId);
            var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
            if (notification != null)
            {
                notification.IsRead = true;
            }
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        // Cleanup if necessary
        await Task.CompletedTask;
    }
}

@if (_isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else if (!_notifications.Any())
{
    <div class="text-center mt-5">
        <i class="bi bi-bell-slash fs-1 text-muted"></i>
        <h4 class="mt-3">No notifications</h4>
        <p class="text-muted">You don't have any notifications yet.</p>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="mb-0">Notifications</h5>
                    </div>
                    <div class="list-group list-group-flush">
                        @foreach (var notification in _notifications)
                        {
                            <div class="list-group-item @(!notification.IsRead ? "bg-light" : "")">
                                <div class="d-flex align-items-center">
                                    <a href="/profile/@notification.SenderId" class="text-decoration-none">
                                        <ProfileImage User="@notification.Sender" Size="48" clazz="rounded-circle me-3" />
                                    </a>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <a href="/profile/@notification.SenderId" class="text-decoration-none text-dark">
                                                    <strong>@notification.Sender.FirstName @notification.Sender.LastName</strong>
                                                </a>
                                                <p class="mb-0 text-muted">@notification.Message</p>
                                            </div>
                                            <small class="text-muted">@notification.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .list-group-item {
        transition: background-color 0.2s ease-in-out;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
    }
</style> 