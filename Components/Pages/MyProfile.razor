@page "/my-profile"
@rendermode InteractiveServer
@using FacebookLike.Service
@using FacebookLike.Neo4j.Node
@inject IAuthService AuthService
@inject IUserService UserService

<RequireAuth>
    <div class="container mt-5">
        <div class="card shadow">
            <div class="card-body">
                <h2 class="card-title mb-4 d-flex align-items-center">
                    My Profile
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm ms-3" role="status" aria-hidden="true"></span>
                    }
                </h2>

                <div class="d-flex align-items-center mb-4">
                    <div class="position-relative" style="width: 100px; height: 100px;">
                        <label class="w-100 h-100 m-0 p-0 d-block" style="cursor:pointer;">
                            <InputFile type="file" accept="image/*" style="display:none;" OnChange="HandleFileSelected" />
                            <ProfileImage User="user" Size="100" clazz="me-3 w-100 h-100" />

                            @if (!string.IsNullOrEmpty(user?.ProfileImageUrl))
                            {
                                <button 
                                    type="button"
                                    class="btn btn-sm btn-danger position-absolute top-0 end-0 rounded-circle"
                                    style="z-index:2;"
                                    @onclick="RemoveProfileImage"
                                    disabled="@isLoading">
                                    <i class="bi bi-x"></i>
                                </button>
                            }

                        </label>
                    </div>
                </div>


                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">First Name</label>
                        <input type="text" class="form-control" @bind="user.FirstName"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Last Name</label>
                        <input type="text" class="form-control" @bind="user.LastName"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind="user.Email"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Gender</label>
                        <select class="form-select" @bind="user.Gender">
                            @foreach (var option in GetGenderOptions())
                            {
                                <option value="@option">@option</option>
                            }
                        </select>
                    </div>

                </div>

                <div class="mt-4">
                    <button type="button" class="@GetButtonClass()" @onclick="SaveChanges">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            @:Saving...
                        }
                        else
                        {
                            @:Save
                        }
                    </button>
                    @if (message != null)
                    {
                        <p class="mt-2 text-success">@message</p>
                    }
                </div>

            </div>
        </div>
    </div>

    <div class="container mt-5">
        <div class="card shadow">
            <div class="card-body">
                <h2 class="card-title mb-4">Your Posts</h2>


            </div>
        </div>
    </div>
</RequireAuth>

@code {
    private User? user;
    private bool isLoading = false;
    private bool isSuccess = false;
    private string? message;

    protected override void OnInitialized()
    {
        user = AuthService.CurrentUser;
    }

    private List<string> GetGenderOptions()
    {
        var allOptions = new List<string> { "Male", "Female", "Not specified" };
        if (string.IsNullOrEmpty(user?.Gender) || !allOptions.Contains(user.Gender))
        {
            return allOptions;
        }
        return new List<string> { user.Gender }.Concat(allOptions.Where(g => g != user.Gender)).ToList();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            isLoading = true;
            StateHasChanged();
            IBrowserFile newProfileImage = e.GetMultipleFiles(1).FirstOrDefault();
            if (newProfileImage != null)
            {
                var stream = newProfileImage.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB max
                var imageUrl = await UserService.UploadProfileImageAsync(user.Id, stream, newProfileImage.Name);
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    user.ProfileImageUrl = imageUrl;
                }
            }
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task SaveChanges()
    {
        if (user == null)
            return;

        isLoading = true;
        isSuccess = false;
        message = null;

        try
        {
            await UserService.UpdateUserAsync(user);
            message = "Profile updated successfully!";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetButtonClass()
    {
        if (isSuccess)
            return "btn btn-success";
        return "btn btn-primary";
    }

    private async Task RemoveProfileImage()
    {
        if (user == null) return;
        isLoading = true;
        StateHasChanged();
        user.ProfileImageUrl = null;
        try
        {
            await UserService.UpdateUserAsync(user);
            message = "Image removed.";
        }
        catch (Exception ex)
        {
            message = $"Error while removing: {ex.Message}";
        }
        isLoading = false;
        StateHasChanged();
    }

}

